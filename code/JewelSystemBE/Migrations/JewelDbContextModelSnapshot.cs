// <auto-generated />
using System;
using JewelSystemBE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JewelSystemBE.Migrations
{
    [DbContext(typeof(JewelDbContext))]
    partial class JewelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JewelSystemBE.ImageRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ImageRecords");

                    b.HasData(
                        new
                        {
                            Id = "2f29b6a7-8010-4a90-853f-c896fd387793",
                            FileName = "dfyqz4e-f004994b-129e-44ad-853f-3eaae3112671.jpg",
                            Path = "dfyqz4e-f004994b-129e-44ad-853f-3eaae3112671.jpg"
                        },
                        new
                        {
                            Id = "58bbac95-17ef-484c-a0d8-24494f8d36a5",
                            FileName = "hentai.png",
                            Path = "hentai.png"
                        },
                        new
                        {
                            Id = "de9b5453-15d2-41a0-922e-1edbcc6e0bef",
                            FileName = "maxresdefault.jpg",
                            Path = "maxresdefault.jpg"
                        },
                        new
                        {
                            Id = "e4b1110f-0340-48d3-82b0-9315acc175e0",
                            FileName = "RDT_20240603_1700187451959011441817016.jpg",
                            Path = "RDT_20240603_1700187451959011441817016.jpg"
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("AttendDate")
                        .HasColumnType("date")
                        .HasColumnName("attend_date");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerPoint")
                        .HasColumnType("int")
                        .HasColumnName("customer_point");

                    b.Property<string>("CustomerRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("customer_rank");

                    b.HasKey("CustomerId");

                    b.ToTable("customer", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerId = "C1",
                            AttendDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerName = "John Doe",
                            CustomerPhone = "012345678",
                            CustomerPoint = 100,
                            CustomerRank = "Gold"
                        },
                        new
                        {
                            CustomerId = "C2",
                            AttendDate = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerName = "Jane Smith",
                            CustomerPhone = "012345677",
                            CustomerPoint = 80,
                            CustomerRank = "Silver"
                        },
                        new
                        {
                            CustomerId = "C3",
                            AttendDate = new DateTime(2024, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerName = "Alice Johnson",
                            CustomerPhone = "012345676",
                            CustomerPoint = 50,
                            CustomerRank = "Bronze"
                        },
                        new
                        {
                            CustomerId = "C4",
                            AttendDate = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerName = "Bob Brown",
                            CustomerPhone = "012345675",
                            CustomerPoint = 120,
                            CustomerRank = "Bronze"
                        },
                        new
                        {
                            CustomerId = "C5",
                            AttendDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerName = "Emily Wilson",
                            CustomerPhone = "012345674",
                            CustomerPoint = 90,
                            CustomerRank = "Bronze"
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Discount", b =>
                {
                    b.Property<string>("DiscountId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("DiscountRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PublicDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.ToTable("discount", (string)null);

                    b.HasData(
                        new
                        {
                            DiscountId = "D1",
                            DiscountName = "Summer Sale",
                            DiscountRate = 0.20000000000000001,
                            ExpireDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderType = "Sale",
                            ProductId = "All",
                            ProductType = "All",
                            PublicDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = "D2",
                            DiscountName = "Holiday Promotion",
                            DiscountRate = 0.29999999999999999,
                            ExpireDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderType = "Sale",
                            ProductId = "All",
                            ProductType = "Ring",
                            PublicDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = "D3",
                            DiscountName = "Spring Clearance",
                            DiscountRate = 0.40000000000000002,
                            ExpireDate = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderType = "Sale",
                            ProductId = "All",
                            ProductType = "Bracelet",
                            PublicDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = "D4",
                            DiscountName = "Back-to-School Sale",
                            DiscountRate = 0.5,
                            ExpireDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderType = "Sale",
                            ProductId = "P002",
                            ProductType = "Ring",
                            PublicDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = "D5",
                            DiscountName = "Winter Warm-up",
                            DiscountRate = 0.0,
                            ExpireDate = new DateTime(2025, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderType = "Sale",
                            ProductId = "All",
                            ProductType = "Necklace",
                            PublicDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Gem", b =>
                {
                    b.Property<string>("GemId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("gem_id");

                    b.Property<double>("BuyPrice")
                        .HasColumnType("float");

                    b.Property<string>("GemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("gem_name");

                    b.Property<double>("GemPrice")
                        .HasColumnType("float")
                        .HasColumnName("gem_price");

                    b.Property<double>("GemWeight")
                        .HasColumnType("float");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GemId");

                    b.ToTable("gem", (string)null);

                    b.HasData(
                        new
                        {
                            GemId = "GE001",
                            BuyPrice = 50000000.0,
                            GemCode = "JSG-R1",
                            GemName = "Natural Mozambique Ruby",
                            GemPrice = 58000000.0,
                            GemWeight = 0.97999999999999998,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE002",
                            BuyPrice = 170000000.0,
                            GemCode = "JSG-R2",
                            GemName = "Burmese Ruby",
                            GemPrice = 190000000.0,
                            GemWeight = 28.0,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE003",
                            BuyPrice = 8235000.0,
                            GemCode = "JSG-R3",
                            GemName = "Thai Ruby",
                            GemPrice = 9756000.0,
                            GemWeight = 9.9399999999999995,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE004",
                            BuyPrice = 1322012.0,
                            GemCode = "JSG-R4",
                            GemName = "India Ruby",
                            GemPrice = 1709078.0,
                            GemWeight = 5.9100000000000001,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE005",
                            BuyPrice = 6900000.0,
                            GemCode = "JSG-R5",
                            GemName = "Mozambique Ruby",
                            GemPrice = 7859078.0,
                            GemWeight = 0.33000000000000002,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE006",
                            BuyPrice = 3700000.0,
                            GemCode = "JSG-R6",
                            GemName = "Heated Natural Ruby",
                            GemPrice = 4166666.0,
                            GemWeight = 0.34000000000000002,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE007",
                            BuyPrice = 8989000.0,
                            GemCode = "JSG-R7",
                            GemName = "Mozambique Ruby",
                            GemPrice = 9789973.0,
                            GemWeight = 0.35999999999999999,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE008",
                            BuyPrice = 4950000.0,
                            GemCode = "JSG-R8",
                            GemName = "Mozambique Ruby (Heated)",
                            GemPrice = 5826558.0,
                            GemWeight = 0.48999999999999999,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE009",
                            BuyPrice = 11900000.0,
                            GemCode = "JSG-R9",
                            GemName = "Mozambique Ruby",
                            GemPrice = 13000000.0,
                            GemWeight = 0.48999999999999999,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE010",
                            BuyPrice = 3000000.0,
                            GemCode = "JSG-R10",
                            GemName = "Burma Ruby",
                            GemPrice = 3658000.0,
                            GemWeight = 0.54000000000000004,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE011",
                            BuyPrice = 30000000.0,
                            GemCode = "JSG-S1",
                            GemName = "Natural Ceylon Sapphire",
                            GemPrice = 35000000.0,
                            GemWeight = 1.02,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE012",
                            BuyPrice = 65000000.0,
                            GemCode = "JSG-S2",
                            GemName = "Burmese Sapphire",
                            GemPrice = 75000000.0,
                            GemWeight = 2.75,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE013",
                            BuyPrice = 22000000.0,
                            GemCode = "JSG-S3",
                            GemName = "Madagascar Sapphire",
                            GemPrice = 26000000.0,
                            GemWeight = 1.5,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE014",
                            BuyPrice = 18000000.0,
                            GemCode = "JSG-S4",
                            GemName = "Australian Sapphire",
                            GemPrice = 21000000.0,
                            GemWeight = 3.2000000000000002,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE015",
                            BuyPrice = 120000000.0,
                            GemCode = "JSG-S5",
                            GemName = "Kashmir Sapphire",
                            GemPrice = 140000000.0,
                            GemWeight = 0.94999999999999996,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE016",
                            BuyPrice = 45000000.0,
                            GemCode = "JSG-S6",
                            GemName = "Heated Natural Sapphire",
                            GemPrice = 50000000.0,
                            GemWeight = 2.1000000000000001,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE017",
                            BuyPrice = 35000000.0,
                            GemCode = "JSG-S7",
                            GemName = "Thai Sapphire",
                            GemPrice = 40000000.0,
                            GemWeight = 1.8,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE018",
                            BuyPrice = 5000000.0,
                            GemCode = "JSG-S8",
                            GemName = "Montana Sapphire",
                            GemPrice = 6000000.0,
                            GemWeight = 0.71999999999999997,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE019",
                            BuyPrice = 28000000.0,
                            GemCode = "JSG-S9",
                            GemName = "Ethiopian Sapphire",
                            GemPrice = 32000000.0,
                            GemWeight = 1.3,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE020",
                            BuyPrice = 150000000.0,
                            GemCode = "JSG-S10",
                            GemName = "Padparadscha Sapphire",
                            GemPrice = 180000000.0,
                            GemWeight = 1.0,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE021",
                            BuyPrice = 5000000.0,
                            GemCode = "JSG-C1",
                            GemName = "Moonstone Cabochon",
                            GemPrice = 6000000.0,
                            GemWeight = 3.5,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE022",
                            BuyPrice = 12000000.0,
                            GemCode = "JSG-C2",
                            GemName = "Opal Cabochon",
                            GemPrice = 15000000.0,
                            GemWeight = 2.1000000000000001,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE023",
                            BuyPrice = 3000000.0,
                            GemCode = "JSG-C3",
                            GemName = "Turquoise Cabochon",
                            GemPrice = 4000000.0,
                            GemWeight = 4.7000000000000002,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE024",
                            BuyPrice = 2000000.0,
                            GemCode = "JSG-C4",
                            GemName = "Labradorite Cabochon",
                            GemPrice = 3000000.0,
                            GemWeight = 5.0,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE025",
                            BuyPrice = 25000000.0,
                            GemCode = "JSG-C5",
                            GemName = "Star Sapphire Cabochon",
                            GemPrice = 30000000.0,
                            GemWeight = 3.2000000000000002,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE026",
                            BuyPrice = 45000000.0,
                            GemCode = "JSG-C6",
                            GemName = "Cat's Eye Chrysoberyl Cabochon",
                            GemPrice = 52000000.0,
                            GemWeight = 2.5,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE027",
                            BuyPrice = 15000000.0,
                            GemCode = "JSG-C7",
                            GemName = "Jade Cabochon",
                            GemPrice = 18000000.0,
                            GemWeight = 6.7999999999999998,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE028",
                            BuyPrice = 5000000.0,
                            GemCode = "JSG-C8",
                            GemName = "Lapis Lazuli Cabochon",
                            GemPrice = 6000000.0,
                            GemWeight = 7.5,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE029",
                            BuyPrice = 2000000.0,
                            GemCode = "JSG-C9",
                            GemName = "Amazonite Cabochon",
                            GemPrice = 2500000.0,
                            GemWeight = 4.2000000000000002,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE030",
                            BuyPrice = 7000000.0,
                            GemCode = "JSG-C10",
                            GemName = "Garnet Cabochon",
                            GemPrice = 8500000.0,
                            GemWeight = 3.0,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE031",
                            BuyPrice = 50000000.0,
                            GemCode = "JSG-E1",
                            GemName = "Colombian Emerald",
                            GemPrice = 58000000.0,
                            GemWeight = 1.2,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE032",
                            BuyPrice = 120000000.0,
                            GemCode = "JSG-E2",
                            GemName = "Zambian Emerald",
                            GemPrice = 140000000.0,
                            GemWeight = 2.5,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE033",
                            BuyPrice = 80000000.0,
                            GemCode = "JSG-E3",
                            GemName = "Brazilian Emerald",
                            GemPrice = 92000000.0,
                            GemWeight = 1.8,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE034",
                            BuyPrice = 60000000.0,
                            GemCode = "JSG-E4",
                            GemName = "Afghan Emerald",
                            GemPrice = 75000000.0,
                            GemWeight = 2.2000000000000002,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE035",
                            BuyPrice = 70000000.0,
                            GemCode = "JSG-E5",
                            GemName = "Russian Emerald",
                            GemPrice = 82000000.0,
                            GemWeight = 1.5,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE036",
                            BuyPrice = 15000000.0,
                            GemCode = "JSG-E6",
                            GemName = "Synthetic Emerald",
                            GemPrice = 18000000.0,
                            GemWeight = 3.0,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE037",
                            BuyPrice = 100000000.0,
                            GemCode = "JSG-E7",
                            GemName = "Zambian Emerald",
                            GemPrice = 120000000.0,
                            GemWeight = 1.1000000000000001,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE038",
                            BuyPrice = 45000000.0,
                            GemCode = "JSG-E8",
                            GemName = "Colombian Emerald",
                            GemPrice = 52000000.0,
                            GemWeight = 0.90000000000000002,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE039",
                            BuyPrice = 95000000.0,
                            GemCode = "JSG-E9",
                            GemName = "Brazilian Emerald",
                            GemPrice = 110000000.0,
                            GemWeight = 2.7000000000000002,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE040",
                            BuyPrice = 55000000.0,
                            GemCode = "JSG-E10",
                            GemName = "Ethiopian Emerald",
                            GemPrice = 65000000.0,
                            GemWeight = 1.3,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE041",
                            BuyPrice = 150000000.0,
                            GemCode = "JSG-D1",
                            GemName = "Round Brilliant Diamond",
                            GemPrice = 170000000.0,
                            GemWeight = 1.0,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE042",
                            BuyPrice = 250000000.0,
                            GemCode = "JSG-D2",
                            GemName = "Princess Cut Diamond",
                            GemPrice = 290000000.0,
                            GemWeight = 1.5,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE043",
                            BuyPrice = 400000000.0,
                            GemCode = "JSG-D3",
                            GemName = "Emerald Cut Diamond",
                            GemPrice = 450000000.0,
                            GemWeight = 2.0,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE044",
                            BuyPrice = 180000000.0,
                            GemCode = "JSG-D4",
                            GemName = "Oval Diamond",
                            GemPrice = 210000000.0,
                            GemWeight = 1.2,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE045",
                            BuyPrice = 320000000.0,
                            GemCode = "JSG-D5",
                            GemName = "Cushion Cut Diamond",
                            GemPrice = 370000000.0,
                            GemWeight = 1.8,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE046",
                            BuyPrice = 200000000.0,
                            GemCode = "JSG-D6",
                            GemName = "Asscher Cut Diamond",
                            GemPrice = 230000000.0,
                            GemWeight = 1.3,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE047",
                            BuyPrice = 280000000.0,
                            GemCode = "JSG-D7",
                            GemName = "Marquise Diamond",
                            GemPrice = 320000000.0,
                            GemWeight = 1.6000000000000001,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE048",
                            BuyPrice = 170000000.0,
                            GemCode = "JSG-D8",
                            GemName = "Radiant Cut Diamond",
                            GemPrice = 200000000.0,
                            GemWeight = 1.1000000000000001,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE049",
                            BuyPrice = 230000000.0,
                            GemCode = "JSG-D9",
                            GemName = "Pear Shaped Diamond",
                            GemPrice = 270000000.0,
                            GemWeight = 1.3999999999999999,
                            Unit = "ct"
                        },
                        new
                        {
                            GemId = "GE050",
                            BuyPrice = 150000000.0,
                            GemCode = "JSG-D10",
                            GemName = "Heart Shaped Diamond",
                            GemPrice = 180000000.0,
                            GemWeight = 1.0,
                            Unit = "ct"
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Gold", b =>
                {
                    b.Property<string>("GoldId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("gold_id");

                    b.Property<double>("BuyPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GoldCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoldName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("gold_name");

                    b.Property<double>("SellPrice")
                        .HasColumnType("float");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GoldId");

                    b.ToTable("gold", (string)null);

                    b.HasData(
                        new
                        {
                            GoldId = "vang24k",
                            BuyPrice = 0.0,
                            Date = new DateTime(2024, 6, 21, 21, 49, 59, 823, DateTimeKind.Local).AddTicks(2559),
                            GoldCode = "Vàng nữ trang 99,99%",
                            GoldName = "24K",
                            SellPrice = 0.0,
                            Unit = "VND/Chỉ"
                        },
                        new
                        {
                            GoldId = "vang18k",
                            BuyPrice = 0.0,
                            Date = new DateTime(2024, 6, 21, 21, 49, 59, 823, DateTimeKind.Local).AddTicks(2574),
                            GoldCode = "Vàng nữ trang 75%",
                            GoldName = "18K",
                            SellPrice = 0.0,
                            Unit = "VND/Chỉ"
                        },
                        new
                        {
                            GoldId = "vang14k",
                            BuyPrice = 0.0,
                            Date = new DateTime(2024, 6, 21, 21, 49, 59, 823, DateTimeKind.Local).AddTicks(2577),
                            GoldCode = "Vàng nữ trang 58,3%",
                            GoldName = "14K",
                            SellPrice = 0.0,
                            Unit = "VND/Chỉ"
                        },
                        new
                        {
                            GoldId = "vang10k",
                            BuyPrice = 0.0,
                            Date = new DateTime(2024, 6, 21, 21, 49, 59, 823, DateTimeKind.Local).AddTicks(2579),
                            GoldCode = "Vàng nữ trang 41,7%",
                            GoldName = "10K",
                            SellPrice = 0.0,
                            Unit = "VND/Chỉ"
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Invoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("invoice_id");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CustomerVoucher")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("customer_voucher");

                    b.Property<decimal>("EndTotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("end_total_price");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoice_date");

                    b.Property<string>("InvoiceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("invoice_type");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_price");

                    b.Property<string>("UserFullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_id");

                    b.HasKey("InvoiceId");

                    b.ToTable("invoice", (string)null);

                    b.HasData(
                        new
                        {
                            InvoiceId = "I1",
                            CustomerId = "C1",
                            CustomerName = "Some Customer Name",
                            CustomerVoucher = 50m,
                            EndTotalPrice = 450m,
                            InvoiceDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceStatus = "Pending",
                            InvoiceType = "Type A",
                            TotalPrice = 500m,
                            UserFullname = "Some User Fullname",
                            UserId = "U1"
                        },
                        new
                        {
                            InvoiceId = "I2",
                            CustomerId = "C2",
                            CustomerName = "Some Customer Name",
                            CustomerVoucher = 30m,
                            EndTotalPrice = 670m,
                            InvoiceDate = new DateTime(2024, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceStatus = "Pending",
                            InvoiceType = "Type B",
                            TotalPrice = 700m,
                            UserFullname = "Some User Fullname",
                            UserId = "U2"
                        },
                        new
                        {
                            InvoiceId = "I3",
                            CustomerId = "C3",
                            CustomerName = "Some Customer Name",
                            CustomerVoucher = 20m,
                            EndTotalPrice = 280m,
                            InvoiceDate = new DateTime(2024, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceStatus = "Pending",
                            InvoiceType = "Type C",
                            TotalPrice = 300m,
                            UserFullname = "Some User Fullname",
                            UserId = "U3"
                        },
                        new
                        {
                            InvoiceId = "I4",
                            CustomerId = "C4",
                            CustomerName = "Some Customer Name",
                            CustomerVoucher = 40m,
                            EndTotalPrice = 960m,
                            InvoiceDate = new DateTime(2024, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceStatus = "Pending",
                            InvoiceType = "Type D",
                            TotalPrice = 1000m,
                            UserFullname = "Some User Fullname",
                            UserId = "U1"
                        },
                        new
                        {
                            InvoiceId = "I5",
                            CustomerId = "C5",
                            CustomerName = "Some Customer Name",
                            CustomerVoucher = 60m,
                            EndTotalPrice = 740m,
                            InvoiceDate = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceStatus = "Pending",
                            InvoiceType = "Type E",
                            TotalPrice = 800m,
                            UserFullname = "Some User Fullname",
                            UserId = "U2"
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.InvoiceItem", b =>
                {
                    b.Property<string>("InvoiceItemId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("invoice_item_id");

                    b.Property<string>("DiscountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("discount_id");

                    b.Property<double>("DiscountRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("discount_rate");

                    b.Property<double>("EndTotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("end_total_price");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("invoice_id");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("product_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("StallId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StallName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("total_price");

                    b.Property<double>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("unit_price");

                    b.Property<string>("WarrantyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("warranty_id");

                    b.HasKey("InvoiceItemId");

                    b.ToTable("invoice_item", (string)null);

                    b.HasData(
                        new
                        {
                            InvoiceItemId = "1",
                            DiscountId = "1",
                            DiscountRate = 0.0,
                            EndTotalPrice = 21.0,
                            InvoiceId = "I1",
                            ProductId = "1",
                            ProductName = "Product 1",
                            Quantity = 2,
                            StallId = "Some Stall Id",
                            StallName = "Some Stall Name",
                            TotalPrice = 21.0,
                            UnitPrice = 10.5,
                            WarrantyId = "W1"
                        },
                        new
                        {
                            InvoiceItemId = "2",
                            DiscountId = "1",
                            DiscountRate = 0.14999999999999999,
                            EndTotalPrice = 21.890000000000001,
                            InvoiceId = "I1",
                            ProductId = "2",
                            ProductName = "Product 2",
                            Quantity = 1,
                            StallId = "Some Stall Id",
                            StallName = "Some Stall Name",
                            TotalPrice = 21.890000000000001,
                            UnitPrice = 25.75,
                            WarrantyId = "W2"
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Jewel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("jewel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsComplete = false,
                            Name = "Necklace"
                        },
                        new
                        {
                            Id = 2,
                            IsComplete = false,
                            Name = "Bracelet"
                        },
                        new
                        {
                            Id = 3,
                            IsComplete = false,
                            Name = "Ring"
                        },
                        new
                        {
                            Id = 4,
                            IsComplete = false,
                            Name = "Earrings"
                        },
                        new
                        {
                            Id = 5,
                            IsComplete = false,
                            Name = "Pendant"
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("product_id");

                    b.Property<double>("BuyPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("GemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gem_id");

                    b.Property<string>("GemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GemWeight")
                        .HasColumnType("float");

                    b.Property<string>("GoldId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gold_id");

                    b.Property<string>("GoldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GoldWeight")
                        .HasColumnType("float")
                        .HasColumnName("gold_weight");

                    b.Property<double>("LaborCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("labor_cost");

                    b.Property<double>("MarkupRate")
                        .HasColumnType("float")
                        .HasColumnName("markup_rate");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("product_code");

                    b.Property<string>("ProductImages")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("product_images");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("product_name");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int")
                        .HasColumnName("product_quantity");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("product_type");

                    b.Property<int>("ProductWarranty")
                        .HasColumnType("int")
                        .HasColumnName("product_warranty");

                    b.Property<double>("ProductWeight")
                        .HasColumnType("float")
                        .HasColumnName("product_weight");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.ToTable("product", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = "P001",
                            BuyPrice = 0.0,
                            CreatedAt = new DateTime(2024, 6, 21, 21, 49, 59, 823, DateTimeKind.Local).AddTicks(4897),
                            GemId = "GE001",
                            GemName = "Some Gem Name",
                            GemWeight = 0.0,
                            GoldId = "vang24k",
                            GoldName = "Some Gold Name",
                            GoldWeight = 45.0,
                            LaborCost = 200.0,
                            MarkupRate = 1.2,
                            ProductCode = "P001",
                            ProductImages = "ruby_necklace.jpg",
                            ProductName = "Ruby Necklace",
                            ProductQuantity = 10,
                            ProductType = "Necklace",
                            ProductWarranty = 12,
                            ProductWeight = 50.0,
                            TotalPrice = 0.0,
                            UnitPrice = 0.0
                        },
                        new
                        {
                            ProductId = "P002",
                            BuyPrice = 0.0,
                            CreatedAt = new DateTime(2024, 6, 21, 21, 49, 59, 823, DateTimeKind.Local).AddTicks(4902),
                            GemId = "GE005",
                            GemName = "Some Gem Name",
                            GemWeight = 0.0,
                            GoldId = "vang10k",
                            GoldName = "Some Gold Name",
                            GoldWeight = 18.0,
                            LaborCost = 100.0,
                            MarkupRate = 1.5,
                            ProductCode = "P002",
                            ProductImages = "sapphire_ring.jpg",
                            ProductName = "Sapphire Ring",
                            ProductQuantity = 5,
                            ProductType = "Ring",
                            ProductWarranty = 24,
                            ProductWeight = 20.0,
                            TotalPrice = 0.0,
                            UnitPrice = 0.0
                        },
                        new
                        {
                            ProductId = "P003",
                            BuyPrice = 0.0,
                            CreatedAt = new DateTime(2024, 6, 21, 21, 49, 59, 823, DateTimeKind.Local).AddTicks(4939),
                            GemId = "GE015",
                            GemName = "Some Gem Name",
                            GemWeight = 0.0,
                            GoldId = "vang24k",
                            GoldName = "Some Gold Name",
                            GoldWeight = 27.0,
                            LaborCost = 150.0,
                            MarkupRate = 1.3,
                            ProductCode = "P003",
                            ProductImages = "emerald_bracelet.jpg",
                            ProductName = "Emerald Bracelet",
                            ProductQuantity = 8,
                            ProductType = "Bracelet",
                            ProductWarranty = 18,
                            ProductWeight = 30.0,
                            TotalPrice = 0.0,
                            UnitPrice = 0.0
                        },
                        new
                        {
                            ProductId = "P004",
                            BuyPrice = 0.0,
                            CreatedAt = new DateTime(2024, 6, 21, 21, 49, 59, 823, DateTimeKind.Local).AddTicks(4943),
                            GemId = "GE035",
                            GemName = "Some Gem Name",
                            GemWeight = 0.0,
                            GoldId = "vang10k",
                            GoldName = "Some Gold Name",
                            GoldWeight = 13.5,
                            LaborCost = 180.0,
                            MarkupRate = 1.7,
                            ProductCode = "P004",
                            ProductImages = "diamond_earrings.jpg",
                            ProductName = "Diamond Earrings",
                            ProductQuantity = 12,
                            ProductType = "Earring",
                            ProductWarranty = 24,
                            ProductWeight = 15.0,
                            TotalPrice = 0.0,
                            UnitPrice = 0.0
                        },
                        new
                        {
                            ProductId = "P005",
                            BuyPrice = 0.0,
                            CreatedAt = new DateTime(2024, 6, 21, 21, 49, 59, 823, DateTimeKind.Local).AddTicks(4946),
                            GemId = "GE045",
                            GemName = "Some Gem Name",
                            GemWeight = 0.0,
                            GoldId = "vang10k",
                            GoldName = "Some Gold Name",
                            GoldWeight = 7.5,
                            LaborCost = 90.0,
                            MarkupRate = 1.1000000000000001,
                            ProductCode = "P005",
                            ProductImages = "topaz_pendant.jpg",
                            ProductName = "Topaz Pendant",
                            ProductQuantity = 20,
                            ProductType = "Necklace",
                            ProductWarranty = 6,
                            ProductWeight = 10.0,
                            TotalPrice = 0.0,
                            UnitPrice = 0.0
                        },
                        new
                        {
                            ProductId = "P006",
                            BuyPrice = 0.0,
                            CreatedAt = new DateTime(2024, 6, 21, 21, 49, 59, 823, DateTimeKind.Local).AddTicks(4949),
                            GemId = "GE025",
                            GemName = "Some Gem Name",
                            GemWeight = 0.0,
                            GoldId = "vang24k",
                            GoldName = "Some Gold Name",
                            GoldWeight = 21.0,
                            LaborCost = 130.0,
                            MarkupRate = 1.2,
                            ProductCode = "P006",
                            ProductImages = "ruby_bracelet.jpg",
                            ProductName = "Ruby Bracelet",
                            ProductQuantity = 7,
                            ProductType = "Bracelet",
                            ProductWarranty = 12,
                            ProductWeight = 25.0,
                            TotalPrice = 0.0,
                            UnitPrice = 0.0
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Stall", b =>
                {
                    b.Property<string>("StallId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StallDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StallName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StallType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StallId");

                    b.ToTable("Stalls");

                    b.HasData(
                        new
                        {
                            StallId = "S1",
                            StaffName = "1",
                            StallDescription = "1",
                            StallName = "Ring",
                            StallType = "Ring",
                            UserId = "US3"
                        },
                        new
                        {
                            StallId = "S2",
                            StaffName = "1",
                            StallDescription = "1",
                            StallName = "Bracelet",
                            StallType = "Bracelet",
                            UserId = "US4"
                        },
                        new
                        {
                            StallId = "S3",
                            StaffName = "1",
                            StallDescription = "1",
                            StallName = "Necklace",
                            StallType = "Necklace",
                            UserId = "US6"
                        },
                        new
                        {
                            StallId = "S4",
                            StaffName = "1",
                            StallDescription = "1",
                            StallName = "Earring",
                            StallType = "Earring",
                            UserId = "US7"
                        },
                        new
                        {
                            StallId = "S5",
                            StaffName = "1",
                            StallDescription = "1",
                            StallName = "Anklet",
                            StallType = "Anklet",
                            UserId = "US8"
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.StallItem", b =>
                {
                    b.Property<string>("StallItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("StallItemId");

                    b.ToTable("StallItems");

                    b.HasData(
                        new
                        {
                            StallItemId = "1fa19f53-fdb0-4c2a-ad8f-5ce35e94e76e",
                            ProductId = "Some Product Id",
                            ProductName = "Some Product Name",
                            quantity = 0
                        },
                        new
                        {
                            StallItemId = "691dc2bd-e5c4-4e2b-a765-07057b195860",
                            ProductId = "Some Product Id",
                            ProductName = "Some Product Name",
                            quantity = 0
                        },
                        new
                        {
                            StallItemId = "519d9aa9-4a2c-48c6-92ef-eef9093e4334",
                            ProductId = "Some Product Id",
                            ProductName = "Some Product Name",
                            quantity = 0
                        },
                        new
                        {
                            StallItemId = "bd30616b-cf77-48df-860b-4d15a07de47c",
                            ProductId = "Some Product Id",
                            ProductName = "Some Product Name",
                            quantity = 0
                        },
                        new
                        {
                            StallItemId = "3357a839-1a6e-4f57-9f33-92e387924dd3",
                            ProductId = "Some Product Id",
                            ProductName = "Some Product Name",
                            quantity = 0
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "US1",
                            Email = "liam@gmail.com",
                            Fullname = "Liam Williams",
                            Password = "$2a$11$H47tctI1Rr43gAhBTEBVfuGvjlp3FgK5keO/ThoAlHxqmceMZTT0C",
                            Role = "Admin",
                            Username = "user1"
                        },
                        new
                        {
                            UserId = "US2",
                            Email = "olivia@gmail.com",
                            Fullname = "Olivia Miller",
                            Password = "$2a$11$H80l9U..HySqAatR9Bm8Pe749rrGjrMZgZv8Fg4RA1LRLKj3y8FUW",
                            Role = "Manager",
                            Username = "user2"
                        },
                        new
                        {
                            UserId = "US3",
                            Email = "james@gmail.com",
                            Fullname = "James Martinez",
                            Password = "$2a$11$Mz9PkyplrXGBDiUb/TChXe/rvJpBzSZzpsoBwYgdQyuENEoFmJ8zK",
                            Role = "Sale",
                            Username = "user3"
                        },
                        new
                        {
                            UserId = "US4",
                            Email = "matao@gmail.com",
                            Fullname = "Mateo Martinez",
                            Password = "$2a$11$cus678R3KnTMceiPz8pK1uFOVl7xUtAY7CqjhrwkVCMiKwQuNyYyS",
                            Role = "Sale",
                            Username = "user4"
                        },
                        new
                        {
                            UserId = "US5",
                            Email = "theodore@gmail.com",
                            Fullname = "Theodore Garcia",
                            Password = "$2a$11$wYqKwULxLxVShI7hb6QbRekQoKuraRRjq.DTwBrtM9LTtCaXz5VXa",
                            Role = "Cashier",
                            Username = "user5"
                        },
                        new
                        {
                            UserId = "US6",
                            Email = "isabel@gmail.com",
                            Fullname = "Isabel Rodriguez",
                            Password = "$2a$11$NbR58M5awB9MgCh9Z7cfeOsc9518d1qMeFLELCtCbj1bU3onuovI6",
                            Role = "Sale",
                            Username = "user6"
                        },
                        new
                        {
                            UserId = "US7",
                            Email = "luna@gmail.com",
                            Fullname = "Luna Taylor",
                            Password = "$2a$11$tpNi905Z5EXAyqVAFBf44euk20MEmpl.DT/UiqQvj49MiEYoxqQ5S",
                            Role = "Sale",
                            Username = "user7"
                        },
                        new
                        {
                            UserId = "US8",
                            Email = "emma@gmail.com",
                            Fullname = "Emma Young",
                            Password = "$2a$11$7e79F/m6LqVjnTU6kAIr7uIwci2j3uFlKTwL8j628Ajpd0OzAqR3C",
                            Role = "Sale",
                            Username = "user8"
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Warranty", b =>
                {
                    b.Property<string>("WarrantyId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("warranty_id");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("date")
                        .HasColumnName("expire_date");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("WarrantyId");

                    b.ToTable("warranty", (string)null);

                    b.HasData(
                        new
                        {
                            WarrantyId = "W1",
                            ExpireDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = "P1",
                            ProductName = "Product A",
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WarrantyId = "W2",
                            ExpireDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = "P2",
                            ProductName = "Product B",
                            StartDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WarrantyId = "W3",
                            ExpireDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = "P3",
                            ProductName = "Product C",
                            StartDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WarrantyId = "W4",
                            ExpireDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = "P3",
                            ProductName = "Product C",
                            StartDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
