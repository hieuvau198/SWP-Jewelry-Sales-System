// <auto-generated />
using System;
using JewelSystemBE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JewelSystemBE.Migrations
{
    [DbContext(typeof(JewelDbContext))]
    partial class JewelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JewelSystemBE.Model.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("AttendDate")
                        .HasColumnType("date")
                        .HasColumnName("attend_date");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("customer_name");

                    b.Property<int>("CustomerPoint")
                        .HasColumnType("int")
                        .HasColumnName("customer_point");

                    b.Property<string>("CustomerRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("customer_rank");

                    b.HasKey("CustomerId");

                    b.ToTable("customer", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerId = "C1",
                            AttendDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerName = "John Doe",
                            CustomerPoint = 100,
                            CustomerRank = "Gold"
                        },
                        new
                        {
                            CustomerId = "C2",
                            AttendDate = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerName = "Jane Smith",
                            CustomerPoint = 80,
                            CustomerRank = "Silver"
                        },
                        new
                        {
                            CustomerId = "C3",
                            AttendDate = new DateTime(2024, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerName = "Alice Johnson",
                            CustomerPoint = 50,
                            CustomerRank = "Bronze"
                        },
                        new
                        {
                            CustomerId = "C4",
                            AttendDate = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerName = "Bob Brown",
                            CustomerPoint = 120,
                            CustomerRank = "Bronze"
                        },
                        new
                        {
                            CustomerId = "C5",
                            AttendDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerName = "Emily Wilson",
                            CustomerPoint = 90,
                            CustomerRank = "Bronze"
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Discount", b =>
                {
                    b.Property<string>("DiscountId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PublicDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.ToTable("discount", (string)null);

                    b.HasData(
                        new
                        {
                            DiscountId = "1",
                            DiscountName = "Summer Sale",
                            ExpireDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderType = "Sale",
                            ProductType = "Jewelry 1",
                            PublicDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = "2",
                            DiscountName = "Holiday Promotion",
                            ExpireDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderType = "Sale",
                            ProductType = "Jewelry 2",
                            PublicDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = "3",
                            DiscountName = "Spring Clearance",
                            ExpireDate = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderType = "Buyback",
                            ProductType = "Jewelry 3",
                            PublicDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = "4",
                            DiscountName = "Back-to-School Sale",
                            ExpireDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderType = "Sale",
                            ProductType = "Jewelry 4",
                            PublicDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = "5",
                            DiscountName = "Winter Warm-up",
                            ExpireDate = new DateTime(2025, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderType = "Buyback",
                            ProductType = "Jewelry 5",
                            PublicDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Gem", b =>
                {
                    b.Property<string>("GemId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("gem_id");

                    b.Property<string>("GemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("gem_name");

                    b.Property<decimal>("GemPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("gem_price");

                    b.HasKey("GemId");

                    b.ToTable("gem", (string)null);

                    b.HasData(
                        new
                        {
                            GemId = "1",
                            GemName = "Ruby",
                            GemPrice = 1000.00m
                        },
                        new
                        {
                            GemId = "2",
                            GemName = "Sapphire",
                            GemPrice = 1500.00m
                        },
                        new
                        {
                            GemId = "3",
                            GemName = "Emerald",
                            GemPrice = 1200.00m
                        },
                        new
                        {
                            GemId = "4",
                            GemName = "Diamond",
                            GemPrice = 5000.00m
                        },
                        new
                        {
                            GemId = "5",
                            GemName = "Topaz",
                            GemPrice = 800.00m
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Gold", b =>
                {
                    b.Property<string>("GoldId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("gold_id");

                    b.Property<string>("GoldName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("gold_name");

                    b.Property<decimal>("GoldPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("gold_price");

                    b.HasKey("GoldId");

                    b.ToTable("gold", (string)null);

                    b.HasData(
                        new
                        {
                            GoldId = "1",
                            GoldName = "24K Gold",
                            GoldPrice = 6000.00m
                        },
                        new
                        {
                            GoldId = "2",
                            GoldName = "22K Gold",
                            GoldPrice = 5500.00m
                        },
                        new
                        {
                            GoldId = "3",
                            GoldName = "18K Gold",
                            GoldPrice = 4500.00m
                        },
                        new
                        {
                            GoldId = "4",
                            GoldName = "14K Gold",
                            GoldPrice = 4000.00m
                        },
                        new
                        {
                            GoldId = "5",
                            GoldName = "10K Gold",
                            GoldPrice = 3500.00m
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Invoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("invoice_id");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("CustomerVoucher")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("customer_voucher");

                    b.Property<decimal>("EndTotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("end_total_price");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoice_date");

                    b.Property<string>("InvoiceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("invoice_type");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_price");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_id");

                    b.HasKey("InvoiceId");

                    b.ToTable("invoice", (string)null);

                    b.HasData(
                        new
                        {
                            InvoiceId = "I1",
                            CustomerId = "C1",
                            CustomerVoucher = 50.00m,
                            EndTotalPrice = 450.00m,
                            InvoiceDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceType = "Type A",
                            TotalPrice = 500.00m,
                            UserId = "U1"
                        },
                        new
                        {
                            InvoiceId = "I2",
                            CustomerId = "C2",
                            CustomerVoucher = 30.00m,
                            EndTotalPrice = 670.00m,
                            InvoiceDate = new DateTime(2024, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceType = "Type B",
                            TotalPrice = 700.00m,
                            UserId = "U2"
                        },
                        new
                        {
                            InvoiceId = "I3",
                            CustomerId = "C3",
                            CustomerVoucher = 20.00m,
                            EndTotalPrice = 280.00m,
                            InvoiceDate = new DateTime(2024, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceType = "Type C",
                            TotalPrice = 300.00m,
                            UserId = "U3"
                        },
                        new
                        {
                            InvoiceId = "I4",
                            CustomerId = "C4",
                            CustomerVoucher = 40.00m,
                            EndTotalPrice = 960.00m,
                            InvoiceDate = new DateTime(2024, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceType = "Type D",
                            TotalPrice = 1000.00m,
                            UserId = "U1"
                        },
                        new
                        {
                            InvoiceId = "I5",
                            CustomerId = "C5",
                            CustomerVoucher = 60.00m,
                            EndTotalPrice = 740.00m,
                            InvoiceDate = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceType = "Type E",
                            TotalPrice = 800.00m,
                            UserId = "U2"
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.InvoiceItem", b =>
                {
                    b.Property<string>("InvoiceItemId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("invoice_item_id");

                    b.Property<string>("DiscountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("discount_id");

                    b.Property<decimal?>("DiscountRate")
                        .IsRequired()
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("discount_rate");

                    b.Property<decimal>("EndTotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("end_total_price");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("invoice_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("product_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_price");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("unit_price");

                    b.Property<string>("WarrantyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("warranty_id");

                    b.HasKey("InvoiceItemId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("WarrantyId");

                    b.ToTable("invoice_item", null, t =>
                        {
                            t.HasCheckConstraint("CK_InvoiceItem_EndTotalPrice", "end_total_price >= 0");

                            t.HasCheckConstraint("CK_InvoiceItem_Quantity", "quantity > 0");

                            t.HasCheckConstraint("CK_InvoiceItem_TotalPrice", "total_price >= 0");

                            t.HasCheckConstraint("CK_InvoiceItem_UnitPrice", "unit_price >= 0");
                        });

                    b.HasData(
                        new
                        {
                            InvoiceItemId = "1",
                            DiscountId = "1",
                            DiscountRate = 0m,
                            EndTotalPrice = 21.00m,
                            InvoiceId = "I1",
                            ProductName = "Product 1",
                            Quantity = 2,
                            TotalPrice = 21.00m,
                            UnitPrice = 10.50m,
                            WarrantyId = "W1"
                        },
                        new
                        {
                            InvoiceItemId = "2",
                            DiscountId = "1",
                            DiscountRate = 0.15m,
                            EndTotalPrice = 21.89m,
                            InvoiceId = "I1",
                            ProductName = "Product 2",
                            Quantity = 1,
                            TotalPrice = 21.89m,
                            UnitPrice = 25.75m,
                            WarrantyId = "W2"
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Jewel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("jewel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsComplete = false,
                            Name = "Necklace"
                        },
                        new
                        {
                            Id = 2,
                            IsComplete = false,
                            Name = "Bracelet"
                        },
                        new
                        {
                            Id = 3,
                            IsComplete = false,
                            Name = "Ring"
                        },
                        new
                        {
                            Id = 4,
                            IsComplete = false,
                            Name = "Earrings"
                        },
                        new
                        {
                            Id = 5,
                            IsComplete = false,
                            Name = "Pendant"
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("GemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("gem_id");

                    b.Property<double>("GemWeight")
                        .HasColumnType("float")
                        .HasColumnName("gem_weight");

                    b.Property<string>("GoldId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("gold_id");

                    b.Property<double>("GoldWeight")
                        .HasColumnType("float")
                        .HasColumnName("gold_weight");

                    b.Property<decimal>("LaborCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("labor_cost");

                    b.Property<float>("MarkupRate")
                        .HasColumnType("real")
                        .HasColumnName("markup_rate");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("product_code");

                    b.Property<string>("ProductImages")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("product_images");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("product_name");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int")
                        .HasColumnName("product_quantity");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("product_type");

                    b.Property<int>("ProductWarranty")
                        .HasColumnType("int")
                        .HasColumnName("product_warranty");

                    b.Property<double>("ProductWeight")
                        .HasColumnType("float")
                        .HasColumnName("product_weight");

                    b.HasKey("ProductId");

                    b.HasIndex("GemId");

                    b.HasIndex("GoldId");

                    b.ToTable("product", null, t =>
                        {
                            t.HasCheckConstraint("CK_Products_GemWeight", "gem_weight > 0");

                            t.HasCheckConstraint("CK_Products_GoldWeight", "gold_weight > 0");

                            t.HasCheckConstraint("CK_Products_LaborCost", "labor_cost >= 0");

                            t.HasCheckConstraint("CK_Products_ProductQuantity", "product_quantity > 0");

                            t.HasCheckConstraint("CK_Products_ProductWeight", "product_weight > 0");
                        });

                    b.HasData(
                        new
                        {
                            ProductId = "789b60a3-8c2f-4cc5-a9ce-d771ca011fbc",
                            CreatedAt = new DateTime(2024, 6, 3, 20, 20, 35, 211, DateTimeKind.Local).AddTicks(6826),
                            GemId = "1",
                            GemWeight = 5.0,
                            GoldId = "1",
                            GoldWeight = 45.0,
                            LaborCost = 200.00m,
                            MarkupRate = 1.2f,
                            ProductCode = "P001",
                            ProductImages = "ruby_necklace.jpg",
                            ProductName = "Ruby Necklace",
                            ProductQuantity = 10,
                            ProductType = "Necklace",
                            ProductWarranty = 12,
                            ProductWeight = 50.0
                        },
                        new
                        {
                            ProductId = "74d56cbc-9568-494e-b03b-6abe0d720da8",
                            CreatedAt = new DateTime(2024, 6, 3, 20, 20, 35, 211, DateTimeKind.Local).AddTicks(6885),
                            GemId = "2",
                            GemWeight = 2.0,
                            GoldId = "2",
                            GoldWeight = 18.0,
                            LaborCost = 100.00m,
                            MarkupRate = 1.5f,
                            ProductCode = "P002",
                            ProductImages = "sapphire_ring.jpg",
                            ProductName = "Sapphire Ring",
                            ProductQuantity = 5,
                            ProductType = "Ring",
                            ProductWarranty = 24,
                            ProductWeight = 20.0
                        },
                        new
                        {
                            ProductId = "44c7c027-3065-4279-be62-0becdcba8ea1",
                            CreatedAt = new DateTime(2024, 6, 3, 20, 20, 35, 211, DateTimeKind.Local).AddTicks(6896),
                            GemId = "3",
                            GemWeight = 3.0,
                            GoldId = "3",
                            GoldWeight = 27.0,
                            LaborCost = 150.00m,
                            MarkupRate = 1.3f,
                            ProductCode = "P003",
                            ProductImages = "emerald_bracelet.jpg",
                            ProductName = "Emerald Bracelet",
                            ProductQuantity = 8,
                            ProductType = "Bracelet",
                            ProductWarranty = 18,
                            ProductWeight = 30.0
                        },
                        new
                        {
                            ProductId = "9e391b1b-f198-4f98-95d8-fe7466e102a8",
                            CreatedAt = new DateTime(2024, 6, 3, 20, 20, 35, 211, DateTimeKind.Local).AddTicks(6905),
                            GemId = "4",
                            GemWeight = 1.5,
                            GoldId = "4",
                            GoldWeight = 13.5,
                            LaborCost = 180.00m,
                            MarkupRate = 1.7f,
                            ProductCode = "P004",
                            ProductImages = "diamond_earrings.jpg",
                            ProductName = "Diamond Earrings",
                            ProductQuantity = 12,
                            ProductType = "Earrings",
                            ProductWarranty = 24,
                            ProductWeight = 15.0
                        },
                        new
                        {
                            ProductId = "f01b872d-8716-46d9-b1f8-5db28a989283",
                            CreatedAt = new DateTime(2024, 6, 3, 20, 20, 35, 211, DateTimeKind.Local).AddTicks(6915),
                            GemId = "5",
                            GemWeight = 2.5,
                            GoldId = "5",
                            GoldWeight = 7.5,
                            LaborCost = 90.00m,
                            MarkupRate = 1.1f,
                            ProductCode = "P005",
                            ProductImages = "topaz_pendant.jpg",
                            ProductName = "Topaz Pendant",
                            ProductQuantity = 20,
                            ProductType = "Pendant",
                            ProductWarranty = 6,
                            ProductWeight = 10.0
                        },
                        new
                        {
                            ProductId = "bf862704-92e6-40ce-9708-e026f4f245ff",
                            CreatedAt = new DateTime(2024, 6, 3, 20, 20, 35, 211, DateTimeKind.Local).AddTicks(6924),
                            GemId = "1",
                            GemWeight = 4.0,
                            GoldId = "2",
                            GoldWeight = 21.0,
                            LaborCost = 130.00m,
                            MarkupRate = 1.2f,
                            ProductCode = "P006",
                            ProductImages = "ruby_bracelet.jpg",
                            ProductName = "Ruby Bracelet",
                            ProductQuantity = 7,
                            ProductType = "Bracelet",
                            ProductWarranty = 12,
                            ProductWeight = 25.0
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            Email = "user1@example.com",
                            Fullname = "User One",
                            Password = "$2a$11$yxtJUaLfSzvmjdNiWCcJq.wpBoXY9WLe9umgmztfj/lVNmegooOgi",
                            Role = "Admin",
                            Username = "user1"
                        },
                        new
                        {
                            UserId = "2",
                            Email = "user2@example.com",
                            Fullname = "User Two",
                            Password = "$2a$11$iOJBqJ0zsV36y2EPbJ98wu7Zj5nNO7WEPWt7quM.2BUEFtge2IdnS",
                            Role = "User",
                            Username = "user2"
                        },
                        new
                        {
                            UserId = "3",
                            Email = "user3@example.com",
                            Fullname = "User Three",
                            Password = "$2a$11$GuIKrwqUwLH18ySqPzvHQelmUyDOdxWVfSjKoGyxb7nvTzyGkkbWO",
                            Role = "User",
                            Username = "user3"
                        },
                        new
                        {
                            UserId = "4",
                            Email = "user4@example.com",
                            Fullname = "User Four",
                            Password = "$2a$11$EAcnxESnv9Cx0lY1PYMZQeimy5Qr1po/87jgkjd5xgLDDatUi/Z1y",
                            Role = "User",
                            Username = "user4"
                        },
                        new
                        {
                            UserId = "5",
                            Email = "user5@example.com",
                            Fullname = "User Five",
                            Password = "$2a$11$yxILJA/YLYlzDDVmVqvmUOyCMhjDFj36MEYKWNVDXKRJweGza.kg.",
                            Role = "User",
                            Username = "user5"
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.Warranty", b =>
                {
                    b.Property<string>("WarrantyId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("warranty_id");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("date")
                        .HasColumnName("expire_date");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("WarrantyId");

                    b.ToTable("warranty", (string)null);

                    b.HasData(
                        new
                        {
                            WarrantyId = "W1",
                            ExpireDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = "P1",
                            ProductName = "Product A",
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WarrantyId = "W2",
                            ExpireDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = "P2",
                            ProductName = "Product B",
                            StartDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WarrantyId = "W3",
                            ExpireDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = "P3",
                            ProductName = "Product C",
                            StartDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("JewelSystemBE.Model.InvoiceItem", b =>
                {
                    b.HasOne("JewelSystemBE.Model.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelSystemBE.Model.Warranty", "Warranty")
                        .WithMany()
                        .HasForeignKey("WarrantyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("JewelSystemBE.Model.Product", b =>
                {
                    b.HasOne("JewelSystemBE.Model.Gem", "Gem")
                        .WithOne()
                        .HasForeignKey("JewelSystemBE.Model.Product", "GemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelSystemBE.Model.Gold", "Gold")
                        .WithMany()
                        .HasForeignKey("GoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gem");

                    b.Navigation("Gold");
                });
#pragma warning restore 612, 618
        }
    }
}
